        -:    0:Source:velha.cpp
        -:    1:/* Copyright [2024] <Copyright Ryan>
        -:    2: * \file  velha.cpp
        -:    3: */
        -:    4:#include "velha.hpp"
        -:    5:/**
        -:    6: * @brief verifica situacao do jogo da velha  
        -:    7: * @author Ryan Reis
        -:    8: * @param  velha - verifica se X venceu, ou se é impossível pelas regras;
        -:    9: */ 
        -:   10:
        7:   11:int VerificaVitoria(int velha[3][3]) {
        -:   12:    /* Verifica se há vitória em linhas j */
       28:   13:    for (int j = 0; j <= 2; j++) {
      21*:   14:        if ((velha[j][0] == velha[j][1] && velha[j][1] == velha[j][2]) &&
    #####:   15:        (velha[j][0] == X || velha[j][0] == O)) {
    #####:   16:            return velha[j][0];
        -:   17:        }
        -:   18:    }
        -:   19:    /* Verifica se há vitória em colunas i */
       17:   20:    for (int i = 0; i <= 2; i++) {
       15:   21:        if ((velha[0][i] == velha[1][i] && velha[1][i] == velha[2][i]) &&
        7:   22:        (velha[0][i] == X || velha[0][i] == O)) {
        5:   23:            return velha[0][i];
        -:   24:        }
        -:   25:    }
        -:   26:    /* Verifica vitória na diagonal principal */
       2*:   27:    if ((velha[0][0] == velha[1][1] && velha[1][1] == velha[2][2]) &&
    #####:   28:    (velha[0][0] == X || velha[0][0] == O)) {
    #####:   29:        return velha[0][0];
        -:   30:    }
        -:   31:    /* Verifica vitória na diagonal secundária */
        2:   32:    if ((velha[0][2] == velha[1][1] && velha[1][1] == velha[2][0]) &&
       2*:   33:    (velha[1][1] == X || velha[1][1] == O)) {
        2:   34:        return velha[1][1];
        -:   35:    }
        -:   36:
    #####:   37:    return 0;
        -:   38:}
        6:   39:bool VerificaRegras(int velha[3][3]) {
        6:   40:    int primeiro = velha[0][0];
        6:   41:    if (primeiro != 1 && primeiro != 2) {
    #####:   42:        return false;
        -:   43:    }
       12:   44:    for (int i=0; i <= 2; i++) {
       35:   45:        for (int j=0; j <= 2; j++) {
       29:   46:            if (velha[i][j] != primeiro && velha[i][j] != 0) {
        4:   47:                return false;
        -:   48:            }
        -:   49:        }
        -:   50:    }
        -:   51:
        2:   52:    return true;
        -:   53:}
        -:   54:
        6:   55:bool VerificaEmpate(int velha[3][3]) {
        6:   56:    int quantX = 0;
        6:   57:    int quantO = 0;
        -:   58:
       24:   59:    for (int i=0; i <= 2; i++) {
       72:   60:        for (int j=0; j <= 2; j++) {
       54:   61:            if (velha[i][j] == X) {
       20:   62:                quantX += 1;
        -:   63:            }
       54:   64:            if (velha[i][j] == O) {
       10:   65:                quantO += 1;
        -:   66:            }
        -:   67:        }
        -:   68:    }
        6:   69:    if ((quantX == quantO) && (quantX > 0) && (quantX <= 2)) {
        2:   70:        return true;
        -:   71:    }
        4:   72:    return false;
        -:   73:}
        -:   74:
        9:   75:bool VerificaIndefinido(int velha[3][3]) {
        9:   76:    int quantX = 0;
        9:   77:    int quantO = 0;
        -:   78:    // Conta os elementos no tabuleiro
       36:   79:    for (int i = 0; i <= 2; i++) {
      108:   80:        for (int j = 0; j <= 2; j++) {
       81:   81:            if (velha[i][j] == X) {
       28:   82:                quantX += 1;
       53:   83:            } else if (velha[i][j] == O) {
       15:   84:                quantO += 1;
        -:   85:            }
        -:   86:        }
        -:   87:    }
        9:   88:    if ((quantX > 3 || quantO > 3) && (VerificaRegras(velha) == false)) {
        1:   89:        return true;
        -:   90:    }
        8:   91:    if (((quantX == 0 || quantO == 0) ||
        6:   92:    (quantX < 3 && quantO < 3 && quantX != quantO)) &&
        3:   93:    (quantO != 9 && quantX != 9)) {
        2:   94:        return true;
        -:   95:    }
        -:   96:
        6:   97:    return false;
        -:   98:}
        -:   99:
        9:  100:int VerificaVelha(int velha[3][3]) {
        -:  101:    /* Verifica se o estado do tabuleiro é indefinido */
        9:  102:    if (VerificaIndefinido(velha)) {
        3:  103:        return -1;
        -:  104:    }
        -:  105:    /* Verifica a existência de empates */
        6:  106:    if (VerificaEmpate(velha)) {
        2:  107:        return 0;
        -:  108:    }
        -:  109:    /* Verifica as regras */
        4:  110:    if (VerificaRegras(velha)) {
        1:  111:        return -2;
        -:  112:    }
       3*:  113:    if (VerificaVitoria(velha) == 1 || VerificaVitoria(velha) == 2) {
        3:  114:        return VerificaVitoria(velha);
        -:  115:    }
        -:  116:
        -:  117:    /* Caso nenhuma das condições anteriores seja satisfeita */
    #####:  118:    return -3;
        -:  119:}
