        -:    0:Source:velha.cpp
        -:    1:/* Copyright [2024] <Copyright Ryan>
        -:    2: * \file  velha.cpp
        -:    3: */
        -:    4:#include "velha.hpp"
        -:    5:/**
        -:    6: * @brief verifica situacao do jogo da velha  
        -:    7: * @author Ryan Reis
        -:    8: * @param  velha - verifica se X venceu, ou se é impossível pelas regras;
        -:    9: */ 
        -:   10:
        4:   11:bool VerificaRegras(int velha[3][3]) {
        4:   12:    int primeiro = velha[0][0];
        4:   13:    if (primeiro != 1 && primeiro != 2) {
    #####:   14:        return false;
        -:   15:    }
        7:   16:    for (int i=0; i <= 2; i++) {
       20:   17:        for (int j=0; j <= 2; j++) {
       17:   18:            if (velha[i][j] != primeiro && velha[i][j] != 0) {
        3:   19:                return false;
        -:   20:            }
        -:   21:        }
        -:   22:    }
        -:   23:
        1:   24:    return true;
        -:   25:}
        -:   26:
        6:   27:bool VerificaEmpate(int velha[3][3]) {
        6:   28:    int quantX = 0;
        6:   29:    int quantO = 0;
        -:   30:
       24:   31:    for (int i=0; i <= 2; i++) {
       72:   32:        for (int j=0; j <= 2; j++) {
       54:   33:            if (velha[i][j] == 1) {
       20:   34:                quantX += 1;
        -:   35:            }
       54:   36:            if (velha[i][j] == 2) {
       10:   37:                quantO += 1;
        -:   38:            }
        -:   39:        }
        -:   40:    }
        6:   41:    if ((quantX == quantO) && (quantX > 0) && (quantX <= 2)) {
        2:   42:        return true;
        -:   43:    }
        4:   44:    return false;
        -:   45:}
        -:   46:
        6:   47:int VerificaVelha(int velha[3][3]) {
        -:   48:    /* Verifica a existência de empates */
        6:   49:    if (VerificaEmpate(velha) == true) {
        2:   50:        return 0;
        -:   51:    }
        -:   52:    /* Verifica as regras */
        4:   53:    if (VerificaRegras(velha) == true) {
        1:   54:        return -2;
        -:   55:    }
       12:   56:    for (int j=0; j <= 2; j++) {
        -:   57:        /* Verifica se a determinada linha j foi toda marcada por X/O*/
       9*:   58:        if ((velha[j][0] == velha[j][1] && velha[j][1] == velha[j][2]) &&
    #####:   59:        (velha[j][0] == 1 || velha[j][0] == 2)) {
    #####:   60:            return velha[j][0];
        -:   61:        }
        -:   62:    }
        8:   63:    for (int i=0; i <= 2; i++) {
        -:   64:        /* Verifica a determinada coluna i foi toda marcada por X/O*/
        7:   65:        if ((velha[0][i] == velha[1][i] && velha[1][i] == velha[2][i]) &&
        3:   66:        (velha[0][i] == 1 || velha[0][i] == 2)) {
        2:   67:            return velha[0][i];
        -:   68:        }
        -:   69:    }
        -:   70:    /*Verifica a diagonal principal*/
       1*:   71:    if ((velha[0][0] == velha[1][1] && velha[1][1] == velha[2][2]) &&
    #####:   72:    (velha[0][0] == 1 || velha[0][0] == 2)) {
    #####:   73:        return velha[0][0];
        -:   74:    }
        -:   75:    /*Verifica diagonal secundária*/
        1:   76:    if ((velha[0][2] == velha[1][1] && velha[1][1] == velha[2][0]) &&
       1*:   77:    (velha[1][1] == 1 || velha[1][1] == 2)) {
        1:   78:        return velha[1][1];
        -:   79:    }
    #####:   80:    return -3;
        -:   81:}
