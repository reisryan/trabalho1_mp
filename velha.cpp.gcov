        -:    0:Source:velha.cpp
        -:    1:/* Copyright [2024] <Copyright Ryan>
        -:    2: * \file  velha.cpp
        -:    3: */
        -:    4:#include "velha.hpp"
        -:    5:/**
        -:    6: * @brief verifica situacao do jogo da velha  
        -:    7: * @author Ryan Reis
        -:    8: * @param  velha - verifica se X venceu, ou se é impossível pelas regras;
        -:    9: */ 
        -:   10:
        4:   11:bool VerificaRegras(int velha[3][3]) {
        4:   12:    int primeiro = velha[0][0];
        4:   13:    if (primeiro != 1 && primeiro != 2) {
    #####:   14:        return false;
        -:   15:    }
        7:   16:    for (int i=0; i <= 2; i++) {
       20:   17:        for (int j=0; j <= 2; j++) {
       17:   18:            if (velha[i][j] != primeiro && velha[i][j] != 0) {
        3:   19:                return false;
        -:   20:            }
        -:   21:        }
        -:   22:    }
        -:   23:
        1:   24:    return true;
        -:   25:}
        -:   26:
        4:   27:int VerificaVelha(int velha[3][3]) {   /* Verifica as regras */
        4:   28:    if (VerificaRegras(velha) == true) {
        1:   29:        return -2;
        -:   30:    }
       12:   31:    for (int j=0; j <= 2; j++) {
        -:   32:        /* Verifica se a determinada linha j foi toda marcada por X/O*/
        9:   33:        if ((velha[j][0] == velha[j][1] && velha[j][1] == velha[j][2]) &&
        1:   34:        (velha[j][0] == 1 || velha[j][0] == 2)) {
    #####:   35:            return velha[j][0];
        -:   36:        }
        -:   37:    }
        9:   38:    for (int i=0; i <= 2; i++) {
        -:   39:        /* Verifica a determinada coluna i foi toda marcada por X/O*/
        7:   40:        if ((velha[0][i] == velha[1][i] && velha[1][i] == velha[2][i]) &&
        2:   41:        (velha[0][i] == 1 || velha[0][i] == 2)) {
        1:   42:            return velha[0][i];
        -:   43:        }
        -:   44:    }
        -:   45:    /*Verifica a diagonal principal*/
       2*:   46:    if ((velha[0][0] == velha[1][1] && velha[1][1] == velha[2][2]) &&
    #####:   47:    (velha[0][0] == 1 || velha[0][0] == 2)) {
    #####:   48:        return velha[0][0];
        -:   49:    }
        -:   50:    /*Verifica diagonal secundária*/
        2:   51:    if ((velha[0][2] == velha[1][1] && velha[1][1] == velha[2][0]) &&
       1*:   52:    (velha[1][1] == 1 || velha[1][1] == 2)) {
        1:   53:        return velha[1][1];
        -:   54:    }
        -:   55:
        1:   56:    return 0;
        -:   57:}
